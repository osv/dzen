.\" Automatically generated by Pandoc 3.1.9
.\"
.TH "dzen2" "1" "2025-01-08" "" ""
.IP
.EX
====================================
 dzen, (c) 2007-2010 by Robert Manea
       (c) 2025 by Olexandr Sydorchuk
====================================
.EE
.PP
Dzen is a general purpose messaging, notification and menuing program
for X11.
It was designed to be fast, tiny and scriptable in any language.
.PP
The \[lq]gadgets\[rq] subdirectory contains some tools that you can use
in combination with dzen.
.PP
Script archive with a collection of interesting ideas:
http://gotmor.googlepages.com/dzenscriptarchive
.SH About this dzen2 fork
Main differences between the original and this fork of \f[CR]dzen2\f[R]:
.IP \[bu] 2
Improved performance for color/font changing (caching X11 resources).
.IP \[bu] 2
Increased line size from 8k to 256k.
.IP \[bu] 2
Align commands: \f[CR]\[ha]left()\f[R], \f[CR]\[ha]center()\f[R],
\f[CR]\[ha]right()\f[R].
You can now run a single dzen instance to render workspaces on the left
side and other widgets on the right side.
.IP \[bu] 2
Improved theme changing on the fly.
Allows setting default fg/bg color and font.
See \f[CR]\[ha]normfg(COLOR)\f[R], \f[CR]\[ha]normbg(COLOR)\f[R],
\f[CR]\[ha]normfg(FONT)\f[R].
.IP \[bu] 2
Added integration test (you can run: \f[CR]make test\f[R]).
.IP \[bu] 2
To make assembly easier, used GNU Autotools instead of a simple
Makefile.
.IP \[bu] 2
\f[CR]-p\f[R] with argument n persist for n seconds, only when the mouse
is not over the window (like popup or tooltip).
.SH Features
.IP \[bu] 2
Small, fast, very tiny set of dependencies (Xlib only by default)
.IP \[bu] 2
Scriptable in any language
.IP \[bu] 2
Sophisticated formating language - including colours, icons, graphics
.IP \[bu] 2
Versatile - display all sorts of information (status bar, menu)
.IP \[bu] 2
Interactive - user defined mouse and keyboard actions.
Hideable, collapsable
.IP \[bu] 2
Optional XFT support (enabled when xft lib present)
.IP \[bu] 2
Optional XINERAMA support (enabled when xinerama lib present)
.SH Requirements
In order to build dzen you need the Xlib header files.
.SH Installation
To enable all features and compile gadgets use next configure options:
.IP
.EX
autoreconf -vfi
\&./configure --enable-gadgets --enable-xft --enable-xpm --enable-xinerama --enable-xcursor
make
make install
.EE
.PP
Note: Using the \f[CR]--enable-FEATURE\f[R] options requires libraries
to be installed.
You might want to disable some feature by \f[CR]--disable-FEATURE\f[R]
.SH Contribute:
Feature requests, patches or anything else related to dzen can be send
to: https://github.com/osv/dzen
.PP
To update man page and README.md from README.dzen, run:
.IP
.EX
make update-man
.EE
.PP
To run integration tests, DejaVu fonts and compilation with the
\f[CR]--enable-xft\f[R] options are required:
.IP
.EX
make test
.EE
.SH Running dzen
\f[CR]dzen\f[R] accepts a couple of options:
.IP
.EX
-fg     foreground color
-bg     background color
-fn     font
-ta     alignment of title window content
        l(eft), c(center), r(ight)
-tw     title window width
-sa     alignment of slave window, see \[dq]-ta\[dq]
-l      lines, see (1)
-e      events and actions, see (2)
-m      menu mode, see (3)
-u      update contents of title and
        slave window simultaneously, see (4)
-p      persist EOF (optional timeout in seconds)
-x      x position
-y      y position
-h      line height (default: fontheight + 2 pixels)
-w      width
-xs     number of Xinerama screen
-v      version information

See \[dq](5) In-text formating language\[dq].
.EE
.SH X resources
Dzen is able to read font and color setting from X resources.
As an example you can add following lines to \[ti]/.Xresources
.IP
.EX
dzen2.font:       -*-fixed-*-*-*-*-*-*-*-*-*-*-*-*
dzen2.foreground: #22EE11
dzen2.background: black
.EE
.SH Window layout
Dzen\[cq]s window layout is as follows:
.IP
.EX
 ------------------------------------------
|        Title window, single line         |
\[ga]------------------------------------------´
|                                          |
|               scrollable                 |
|              Slave window                |
|             multiple lines               |
|     lines to display simultaneously      |
|           controlled with the            |
|              \[aq]-l\[aq] option                 |
|                                          |
|                                          |
\[ga]------------------------------------------´
.EE
.PP
The first line you provide to dzen always goes to the title window, all
other consecutive lines will be drawn to the slave window unless you
explicitly override this with the \[lq](5) In-text formating
language\[rq] command \[ha]tw().
.SS QA:
Q1: I don\[cq]t want a slave window, what to do?
A1: Do not provide the \f[CR]-l\f[R] option, all lines will be displayed
in the title window, this is the default behaviour.
.PP
Q2: I used the \f[CR]-l\f[R] option but no slave window appears.
A2: With the default event/action handling the slave window will only be
displayed if you hoover with the mouse over the title window.
See \[lq](2) Events and actions\[rq] if you\[cq]d like to change this.
.PP
Q3: If I echo some text or cat a file dzen closes itself immediately.
A3: There are 2 different approaches dzen uses to terminate itself, see
next section \[lq]Termination\[rq].
.PP
Q4: Ok, the title and slave thing works, can I update the contents of
both windows at the same time?
A4: Sure, see \[lq](4) Simultaneous updates\[rq] or use the in-text
command \[lq]\[ha]tw()\[rq] to explicitly draw to the title window.
See \[lq](5) In-Text formating language\[rq] for further details
.PP
Q5: Can I change color of my input at runtime?
A5: Yes, you can change both background and foreground colors and much
more See \[lq](5) In-Text formating language\[rq].
.PP
Q6: Can I use dzen as a menu?
A6: Yes, both vertical and horizontal menus are supported.
See \[lq](3) Menu\[rq] for further details.
.SH Termination:
\f[CR]dzen\f[R] uses two different approaches to terminate itself:
.IP \[bu] 2
Timed termination: if EOF is received -> terminate
.RS 2
.IP \[bu] 2
unless the \f[CR]-p\f[R] option is set
.RS 2
.IP \[bu] 2
\f[CR]-p\f[R] Without argument persist forever
.IP \[bu] 2
\f[CR]-p\f[R] With argument n persist for n seconds, only when the mouse
is not over the window.
.RE
.RE
.IP \[bu] 2
Interactive termination: if mouse button3 is clicked -> terminate
.RS 2
.IP \[bu] 2
this is the default behaviour, see (2)
.IP \[bu] 2
in some modes the Escape key terminates too, see (2)
.RE
.SS Return values:
0 - dzen received EOF 1 - some error occured, inspect the error message
user defined - set with `exit:retval' action, see (2)
.SH (1) Option \f[CR]-l\f[R]: Slave window
Enables support for displaying multiple lines.
The parameter to \[lq]-l\[rq] specifies the number of lines to be
displayed.
.PP
These lines of input are held in the slave window which becomes active
as soon as the pointer enters the title (default action) window.
.PP
If the mouse leaves the slave window it will be hidden unless it is set
sticky by clicking with Button2 into it (default action).
.PP
Button4 and Button5 (mouse wheel) will scroll the slave window up and
down if the content exceeds the window height (default action).
.SH (2) Option \f[CR]-e\f[R]: Events and actions
dzen allows the user to associate actions to events.
.PP
The command line syntax is as follows:
.IP
.EX
-e \[aq]event1=action1:option1:...option<n>,...,action<m>;...;event<l>\[aq]
.EE
.PP
Every event can take any number of actions and every action can take any
number of options.
(By default limited to 64 each, easily changeable in action.h)
.PP
An example:
.IP
.EX
-e \[aq]button1=exec:xterm:firefox;entertitle=uncollapse,unhide;button3=exit\[aq]
.EE
.PP
Meaning:
.IP \[bu] 2
\f[CR]button1=exec:xterm:firefox;\f[R] On Button1 event (Button1 press
on the mouse) execute xterm and firefox.
.PP
Note: xterm and firefox are options to the exec action
.IP \[bu] 2
\f[CR]entertitle=uncollapse,unhide;\f[R] On entertitle (mouse pointer
enters the title window) uncollapse slave window and unhide the title
window
.IP \[bu] 2
\f[CR]button3=exit\f[R] On button3 event exit dzen
.SS Supported events:
.IP
.EX
onstart             Perform actions right after startup
onexit              Perform actions just before exiting
onnewinput          Perform actions if there is new input for the slave window
button1             Mouse button1 released
button2             Mouse button2 released
button3             Mouse button3 released
button4             Mouse button4 released (usually scrollwheel)
button5             Mouse button5 released (usually scrollwheel)
button6             Mouse button6 released
button7             Mouse button7 released
entertitle          Mouse enters the title window
leavetitle          Mouse leaves the title window
enterslave          Mouse enters the slave window
leaveslave          Mouse leaves the slave window
sigusr1             SIGUSR1 received
sigusr2             SIGUSR2 received
key_KEYNAME         Keyboard events (*)

(*) Keyboard events:
--------------------

Every key can be bound to an action (see below). The format is:
key_KEYNAME where KEYNAME is the name of the key as defined in
keysymdef.h (usually: /usr/include/X11/keysymdef.h).  The part
after \[ga]XK_\[ga] in keysymdef.h must be used for KEYNAME.
.EE
.SS Supported actions:
.IP
.EX
exec:command1:..:n  execute all given options
menuexec            executes selected menu entry
exit:retval         exit dzen and return \[aq]retval\[aq]
print:str1:...:n    write all given options to STDOUT
menuprint           write selected menu entry to STDOUT
collapse            collapse (roll-up) slave window
uncollapse          uncollapse (roll-down) slave window
togglecollapse      toggle collapsed state
stick               stick slave window
unstick             unstick slave window
togglestick         toggle sticky state
hide                hide title window
unhide              unhide title window
togglehide          toggle hide state
raise               raise window to view (above all others)
lower               lower window (behind all others)
scrollhome          show head of input
scrollend           show tail of input
scrollup:n          scroll slave window n lines up   (default n=1)
scrolldown:n        scroll slave window n lines down (default n=1)
grabkeys            enable keyboard support
ungrabkeys          disable keyboard support
grabmouse           enable mouse support
                    only needed with specific windowmanagers, such as fluxbox
ungrabmouse         release mouse
                    only needed with specific windowmanagers, such as fluxbox


Note:   If no events/actions are specified dzen defaults to:

    Title only mode:
    ----------------

    -e \[aq]button3=exit:13\[aq]


    Multiple lines and vertical menu mode:
    --------------------------------------

    -e \[aq]entertitle=uncollapse,grabkeys;
        enterslave=grabkeys;leaveslave=collapse,ungrabkeys;
        button1=menuexec;button2=togglestick;button3=exit:13;
        button4=scrollup;button5=scrolldown;
        key_Escape=ungrabkeys,exit\[aq]


    Horizontal menu mode:
    ---------------------

    -e \[aq]enterslave=grabkeys;leaveslave=ungrabkeys;
        button4=scrollup;button5=scrolldown;
        key_Left=scrollup;key_Right=scrolldown;
        button1=menuexec;button3=exit:13
        key_Escape=ungrabkeys,exit\[aq]


    If you define any events/actions, there is no default behaviour,
    i.e. you will have to specify _all_ events/actions you want to
    use.
.EE
.SH (3) Option \f[CR]-m\f[R], Menu
Dzen provides two menu modes, vertical and horizontal menus.
You can access these modes by adding `v'(vertical) or `h'(horizontal) to
the `-m' option.
If nothing is specified dzen defaults to vertical menus.
.PP
Vertical menu, both invocations are equivalent:
.IP
.EX
dzen2 -p -l 4 -m < file
dzen2 -p -l 4 -m v < file
.EE
.PP
Horizontal menu:
.IP
.EX
dzen2 -p -l 4 -m h < file
.EE
.PP
All actions beginning with \[lq]menu\[rq] work on the selected menu
entry.
.PP
Note: Menu mode only makes sense if \f[CR]-l <n>\f[R] is specified!
Horizontal menus have no title window, so all actions affecting the
title window will be silently discarded in this mode.
.SH (4) Option \f[CR]-u\f[R], Simultaneous updates
** DEPRECATED **
.PP
This option provides facilities to update the title and slave window at
the same time.
.PP
The way it works is best described by an example:
.IP
.EX
Motivation:

We want to display an updating clock in the title and some log
output in the slave window.

Solution:

while true; do
      date                # output goes to the title window
      dmesg | tail -n 10  # output goes to the slave window
      sleep 1
done | dzen2 -l 10 -u
.EE
.PP
For this to work correctly it is essential to provide exactly the number
of lines to the slave window as defined by the parameter to
\f[CR]-l\f[R].
.SH (5) In-text formating language:
This feature allows to dynamically (at runtime) format the text dzen
displays and control its behaviour.
.PP
Currently the following commands are supported:
.SS Colors:
.IP
.EX
\[ha]fg(color)         Set foreground color
\[ha]fg()              Without arguments, sets default fg color
\[ha]bg(color)         Set background color
\[ha]bg()              Without arguments, sets default bg color
.EE
.SS Graphics:
.IP
.EX
\[ha]i(path)           Draw icon specified by path
                   supported formats: XBM and optionally XPM

\[ha]r(WIDTHxHEIGHT)   Draw a rectangle with the dimensions
                   WIDTH and HEIGHT
\[ha]ro(WIDTHxHEIGHT)  Rectangle outline

\[ha]c(RADIUS)         Draw a circle with size RADIUS pixels
\[ha]co(RADIUS)        Circle outline
.EE
.SS Positioning:
.IP
.EX
\[ha]p(ARGUMENT)       Position next input amount of PIXELs to the right
                   or left of the current position
                   a.k.a. relative positioning

\[ha]pa(ARGUMENT)      Position next input at PIXEL
                   a.k.a. absolute positioning
                   For maximum predictability \[ga]\[ha]pa()\[ga] should only be
                   used with \[ga]-ta l\[ga] or \[ga]-sa l\[ga]

 Where ARGUMENT:

 \[ha]p(+-X)           Move X pixels to the right or left of the current position (on the X axis)

 \[ha]p(+-X;+-Y)       Move X pixels to the right or left and Y pixels up or down of the current
                   position (on the X and Y axis)

 \[ha]p(;+-Y)          Move Y pixels up or down of the current position (on the Y axis)

 \[ha]p()              Without parameters resets the Y position to its default

 \[ha]pa()             Takes the same parameters as described above but positions at
                   the absolute X and Y coordinates

 Further \[ha]p() also takes some symbolic names as argument:

 _LOCK_X           Lock the current X position, useful if you want to
                   align things vertically
 _UNLOCK_X         Unlock the X position
 _LEFT             Move current x-position to the left edge
 _RIGHT            Move current x-position to the right edge
 _TOP              Move current y-position to the top edge
 _CENTER           Move current x-position to center of the window
 _BOTTOM           Move current y-position to the bottom edge

\[ha]left()            Align next input to left. Reset settings (fg, bg, fn, etc)
\[ha]center()          Align next input to center. Reset settings (fg, bg, fn, etc)
\[ha]right()           Align next input to rigth. Reset settings (fg, bg, fn, etc)
                   Example:
                     \[ha]left()\[ha]fg(red)Left \[ha]center()\[ha]fg(green)Center \[ha]right()\[ha]fg(blue)Right
                   Giving:
.EE
.PP
Left Center Right
.SS Interaction:
.IP
.EX
\[ha]ca(BTN, CMD) ... \[ha]ca()

                   Used to define \[aq]clickable areas\[aq] anywhere inside the
                   title window or slave window.
                   - \[aq]BTN\[aq] denotes the mouse button (1=left, 2=right, 3=middle, etc.)
                   - \[aq]CMD\[aq] denotes the command that should be spawned when the specific
                     area has been clicked with the defined button
                   - \[aq]...\[aq] denotes any text or formating commands dzen accepts
                   - \[aq]\[ha]ca()\[aq] without arguments denotes the end of this clickable area

                   Example:
                     foo \[ha]ca(1, echo one)click me and i\[aq]ll echo one\[ha]ca() bar
.EE
.SS Actions as commands:
.IP
.EX
\[ha]togglecollapse()
\[ha]collapse()
\[ha]uncollapse()
\[ha]togglestick()
\[ha]stick()            See section (2) \[dq]Events and actions\[dq] for a detailed description
\[ha]unstick()          of each command.
\[ha]togglehide()
\[ha]hide()
\[ha]unhide()
\[ha]raise()
\[ha]lower()
\[ha]scrollhome()
\[ha]scrollend()
\[ha]exit()
.EE
.SS Other:
.IP
.EX
\[ha]tw()              draw to title window
                   This command has some annoyances, as only
                   the input after the command will be drawn
                   to the title window, so it is best used
                   only once and as first command per line.
                   Subject to be improved in the future.

\[ha]cs()              clear slave window
                   This command must be the first and only command
                   per line.

\[ha]normfg(COLOR)     Set the normal foreground color (that will be
                   used when \[ha]bg()). You might want to use \[ha]tw()
                   and \[ha]cs() after. This command must be the first
                   and only command per line.

\[ha]normbg(COLOR)     Set the normal background color (that will be
                   used when \[ha]bg()). You might want to use \[ha]tw()
                   and \[ha]cs() after. This command must be the first
                   and only command per line.

\[ha]normfn(FONT)      Set the normal font.

\[ha]ib(VALUE)         ignore background setting, VALUE can be either
                   1 to ignore or 0 to not ignore the bg color set
                   with \[ha]bg(color).
                   This command is useful in combination with \[ha]p()
                   and \[ha]\[ha]pa in order to position the input inside
                   other already drawn input.

                   Example:
                     \[ha]ib(1)\[ha]fg(red)\[ha]ro(100x15)\[ha]p(-98)\[ha]fg(blue)\[ha]r(20x10)\[ha]fg(orange)\[ha]p(3)\[ha]r(40x10)\[ha]p(4)\[ha]fg(darkgreen)\[ha]co(12)\[ha]p(2)\[ha]c(10)
                   Giving:
                     
.EE
.PP
These commands can appear anywhere and in any combination in dzen\[cq]s
input.
.PP
The color can be specified either as symbolic name (e.g.\ red,
darkgreen, etc.)
or as #rrggbb hex-value (e.g.\ #ffffaa).
.PP
Icons must be in the XBM or optionally XPM format, see the
\[lq]bitmaps\[rq] directory for some sample icons.
With the standard \[lq]bitmap\[rq] application you can easily draw your
own icons.
.PP
Note: Displaying XPM (pixmap) files imposes a somewhat higher load than
lightweight XBM files, so use them with care in tight loops.
.PP
Note: Doubling the \f[CR]\[ha]\[ha]\f[R] character removes the special
meaning from it.
.SS Some examples:
Input: \[ha]fg(red)I\[cq]m red text \[ha]fg(blue)I am blue
.PP
Resulting in: I\[cq]m red text I am blue
.PP
Input: \[ha]bg(#ffaaaa)The \[ha]fg(yellow)text to
^bg(blue)^fg(orange)colorize
.PP
Resulting in: The text to colorize
.PP
Input: \[ha]fg(white)Some text containing \[ha]\[ha]\[ha]\[ha]
characters
.PP
Resulting in: Some text containing \[ha]\[ha] characters
.PP
Input for icons: \[ha]i(bitmaps/envelope.xbm) I am an envelope
\[ha]fg(yellow)and \[ha]i(bitmaps/battery.xbm) I\[cq]m a battery.
.PP
Resulting in: I am an envelope and I\[cq]m a battery.
.PP
Input for rectangles: 6x4 rectangle \[ha]r(6x4) \[ha]fg(red)12x8
\[ha]r(12x8) \[ha]fg(yellow)and finally 100x15 \[ha]r(100x15)
.PP
Resulting in: 6x4 rectangle 12x8 and finally 100x15
.PP
Input for relative positioning: Some text^p(100)^fg(yellow)100 pixels to
the right^p(50)^fg(red)50 more pixels to the right
.PP
Resulting in: Some text100 pixels to the right50 more pixels to the
right
.SH Examples:
.IP \[bu] 2
Display message and timeout after 10 seconds:
.RS 2
.IP
.EX
(echo \[dq]This is a message\[dq]; sleep 10) | dzen2 -bg darkred -fg grey85 -fn fixed
.EE
.RE
.IP \[bu] 2
Display message and never timeout:
.RS 2
.IP
.EX
echo \[dq]This is a message\[dq]| dzen2 -p
.EE
.RE
.IP \[bu] 2
Display updating single line message:
.RS 2
.IP
.EX
for i in $(seq 1 20); do A=${A}\[aq]=\[aq]; print $A; sleep 1; done | dzen2
.EE
.RE
.IP \[bu] 2
Display header and a message with multiple lines:
.RS 2
.IP
.EX
(echo Header; cal; sleep 20) | dzen2 -l 8
.EE
.RE
.PP
Displays \[lq]Header\[rq] in the title window and the output of cal in
the 8 lines high slave window.
.IP \[bu] 2
Display updating messages:
.RS 2
.IP
.EX
(echo Header; while true; do echo test$((i++)); sleep 1; done) | dzen2 -l 12
.EE
.RE
.PP
The slave window will update contents if new input has arrived.
.IP \[bu] 2
Display log files:
.RS 2
.IP
.EX
(su -c \[dq]echo LOGFILENAME; tail -f /var/log/messages\[dq]) | dzen2 -l 20 -x 100 -y 300 -w 500
.EE
.RE
.IP \[bu] 2
Monthly schedule with remind:
.RS 2
.IP
.EX
(echo Monthly Schedule; remind -c1 -m) | dzen2 -l 52 -w 410 -p -fn lime -bg \[aq]#e0e8ea\[aq] -fg black -x 635
.EE
.RE
.IP \[bu] 2
Simple menu:
.RS 2
.IP
.EX
echo \[dq]Applications\[dq] | dzen2 -l 4 -p -m < menufile
.EE
.RE
.IP \[bu] 2
Horizontal menu without any files:
.RS 2
.IP
.EX
{echo Menu; echo -e \[dq]xterm\[rs]nxclock\[rs]nxeyes\[rs]nxfontsel\[dq]} | dzen2 -l 4 -m h -p
.EE
.RE
.IP \[bu] 2
Extract PIDs from the process table:
.RS 2
.IP
.EX
{echo Procs; ps -a} | dzen2 -m -l 12 -p \[rs]
-e \[aq]button1=menuprint;button3=exit;button4=scrollup:3;button5=scrolldown:3;entertitle=uncollapse;leaveslave=collapse\[aq] \[rs]
      | awk \[aq]{print $1}\[aq]
.EE
.RE
.IP \[bu] 2
Dzen as xmonad (see http://xmonad.org) statusbar:
.RS 2
.IP
.EX
status.sh | dzen2 -ta r -fn \[aq]-*-profont-*-*-*-*-11-*-*-*-*-*-iso8859\[aq] -bg \[aq]#aecf96\[aq] -fg black \[rs]
  -p -e \[aq]sigusr1=raise;sigusr2=lower;onquit=exec:rm /tmp/dzen2-pid;button3=exit\[aq] & echo $! > /tmp/dzen2-pid
.EE
.RE
.PP
Have fun.
.SH AUTHORS
Robert Manea; Olexandr Sydorchuk.
